{"version":3,"sources":["service/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APIService","method","doc","body","id","Promise","resolve","reject","url","fetch","JSON","stringify","headers","then","res","json","catch","err","App","props","toggleSidebar","setState","showSidebar","state","contentClick","renderUsers","users","map","user","Table","Row","Cell","first_name","last_name","email","city","street_address","isLoading","this","request","console","log","finally","Sidebar","Pushable","as","Segment","className","Menu","animation","icon","inverted","vertical","visible","width","Item","Icon","name","Pusher","dimmed","onClick","Container","Dropdown","item","simple","text","loading","Header","celled","HeaderCell","Body","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09e3c42f.chunk.js","sourcesContent":["import { rejects } from 'node:assert';\nimport { HTTPMethod } from '../interface';\n\nconst BASE_URL = 'https://my-json-server.typicode.com/abiyogaaron/teaching-react-app/'\n\nclass APIService {\n  public static request<Body>(method: HTTPMethod, doc: string, body?: Body, id?: string) {\n    return new Promise((resolve, reject) => {\n      let url = `${BASE_URL}/${doc}`;\n      if (id) {\n        url = `${url}/id`;\n      }\n      fetch(url, {\n        method: method,\n        body: JSON.stringify(body),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      }).then(res => {\n        if (res) {\n          resolve(res.json());\n        }\n      }).catch(err => {\n        reject(err);\n      })\n    })\n  }\n}\n\nexport default APIService;","import React from 'react';\nimport { Header, Icon, Container, Menu, Segment, Sidebar, Dropdown, Table } from 'semantic-ui-react'\nimport APIService from './service';\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport { IGETUsersResponse } from './interface';\n\ninterface IAppState {\n  showSidebar: boolean;\n  isLoading: boolean;\n  users: any;\n}\n\nclass App extends React.Component<{}, IAppState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSidebar: false,\n      isLoading: false,\n      users: [],\n    }\n  }\n\n  componentDidMount() {\n    this.setState({isLoading: true})\n    APIService.request('GET', 'users')\n      .then(res => {\n        this.setState({users: res})\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.setState({isLoading: false})\n      })\n  }\n\n  public toggleSidebar = () => {\n    this.setState({showSidebar: !this.state.showSidebar });\n  }\n\n  public contentClick = () => {\n    if (this.state.showSidebar) {\n      this.setState({showSidebar: !this.state.showSidebar });\n    }\n  }\n\n  public renderUsers = () => {\n    const { users } = this.state;\n    return users.map((user: IGETUsersResponse) => {\n      return (\n        <Table.Row key={user.id}>\n          <Table.Cell>\n            {user.id}\n          </Table.Cell>\n          <Table.Cell>\n            {`${user.first_name} ${user.last_name}`}\n          </Table.Cell>\n          <Table.Cell>\n            {`${user.email}`}\n          </Table.Cell>\n          <Table.Cell>\n            {`${user.city} ${user.street_address}`}\n          </Table.Cell>\n        </Table.Row>\n      )\n    })\n  }\n\n  public render() {\n    const { showSidebar, isLoading } = this.state;\n    return (\n      <Sidebar.Pushable as={Segment} className=\"app-wrapper\">\n        <Sidebar\n          as={Menu}\n          animation='overlay'\n          icon='labeled'\n          inverted\n          vertical\n          visible={showSidebar}\n          width='thin'\n        >\n          <Menu.Item as='a'>\n            <Icon name='home' />\n            Home\n          </Menu.Item>\n          <Menu.Item as='a'>\n            <Icon name='gamepad' />\n            Games\n          </Menu.Item>\n          <Menu.Item as='a'>\n            <Icon name='camera' />\n            Channels\n          </Menu.Item>\n        </Sidebar>\n\n        <Sidebar.Pusher\n          dimmed={showSidebar}\n          onClick={this.contentClick}\n        >\n          <Menu className=\"navbar\">\n            <Container className=\"navbar-top\">\n              <Menu.Item onClick={this.toggleSidebar}>\n                <Icon name=\"bars\" />\n              </Menu.Item>\n              <Dropdown\n                item\n                simple\n                text={'menu dropdown'}\n              >\n                <Dropdown.Menu>\n                  <Dropdown.Item\n                    icon=\"settings\"\n                    text=\"settings\"\n                  />\n                  <Dropdown.Item icon=\"sign out\" text=\"Sign out\"/>\n                </Dropdown.Menu>\n              </Dropdown>\n            </Container>\n          </Menu>\n          <Container>\n            <Segment loading={isLoading}>\n              <Header as='h3'>Application Content</Header>\n\n              <Table celled>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Id</Table.HeaderCell>\n                    <Table.HeaderCell>Full name</Table.HeaderCell>\n                    <Table.HeaderCell>Email</Table.HeaderCell>\n                    <Table.HeaderCell>Address</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                  {this.renderUsers()}\n                </Table.Body>\n              </Table>\n\n            </Segment>\n          </Container>\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    )\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}